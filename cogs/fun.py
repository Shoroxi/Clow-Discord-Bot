import random
import urllib.parse
import sqlite3
import asyncio
import aiohttp
import discord
import io
import re
import urllib
from discord.ext import commands
import loadconfig

class fun(commands.Cog):
    db = 'reaction.db'

    def __init__(self, bot):
        self.bot = bot

    async def cog_command_error(self, ctx, error):
        print('Error in {0.command.qualified_name}: {1}'.format(ctx, error))

    @commands.command(aliases=['–∂–∞–±–∞', 'nodejs', 'js'], qualified_name="–∂–∞–±–∞", description="–ü–æ—Ç–æ–º—É –ß—Ç–æ Java != Javscript")
    async def java(self, ctx):
        await ctx.send(':interrobang: –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É jQuery, Javascript –∏–ª–∏ Node.js? https://abload.de/img/2016-05-102130191kzpu.png')

    #@commands.command()
    #async def gif(self, ctx, *keywords):
    #    """Retrieve the first search result from Giphy."""
    #    if keywords:
    #        keywords = "+".join(keywords)
    #    else:
    #        await ctx.send_help()
    #        return

    #    giphy_api_key = (await ctx.bot.get_shared_api_tokens("GIPHY")).get("api_key")
    #    if not giphy_api_key:
    #        await ctx.send(
    #            _("An API key has not been set! Please set one with `{prefix}giphycreds`.").format(
    #                prefix=ctx.clean_prefix
    #            )
    #        )
    #        return

    #    url = "http://api.giphy.com/v1/gifs/search?&api_key={}&q={}".format(
    #        giphy_api_key, keywords
    #    )

    #    async with self.session.get(url) as r:
    #        result = await r.json()
    #        if r.status == 200:
    #            if result["data"]:
    #                await ctx.send(result["data"][0]["url"])
    #            else:
    #                await ctx.send("No results found.")
    #        else:
    #            await ctx.send("Error contacting the Giphy API.")


    @commands.command(hidden=True, aliases=['8ball'])
    async def eightball(self, ctx, *, question: commands.clean_content):
        """ –ü—Ä–æ–∫—É–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å 8ball """
        ballresponse = [
        '–¥–∞', '–Ω–µ—Ç', '—Ç—ã –¥–∞–ª–±–µ–±', '—Ö—É–π —Å–æ—Å–∏', '–£–≤—ã, –¥–∞', '–û—Ç–≤–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π', '–ê –≤–µ–¥—å –∏ —è —Ä–∞–Ω—å—à–µ –∑–∞–¥–∞–≤–∞–ª—Å—è —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º', '—è —á–æ —è–±—É?', '–•–ó', '–ö–∞–∫ —Ö–∞—á–µ—à—å'
        ]
        answer = random.choice(ballresponse)
        await ctx.send(f"üé± **–í–æ–ø—Ä–æ—Å:** {question}\n**–û—Ç–≤–µ—Ç:** {answer}")
    
    @commands.command(aliases=['c++', 'c#', 'objective-c'])
    async def csharp(self, ctx):
        '''–ö–∞–∫ –≤—ã –≤–æ–æ–±—â–µ –¥–æ–ª–∂–Ω—ã —Å–º–æ—Ç—Ä–µ—Ç—å???'''
        await ctx.send(':interrobang: –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É C, C++, C# –∏–ª–∏ Objective-C? https://i.imgur.com/Nd4aAXO.png')

    @commands.command()
    async def praise(self, ctx):
        '''–°–ª–∞–≤–∞ —Å–æ–ª–Ω—Ü—É'''
        await ctx.send('https://i.imgur.com/K8ySn3e.gif')

    @commands.command()
    async def css(self, ctx):
        '''Counter Strike: Source'''
        await ctx.send('http://i.imgur.com/TgPKFTz.gif')

    @commands.command(alieses=['—Å–º–µ—Ä—Ç—å'])
    async def countdown(self, ctx):
        '''–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏.'''
        countdown = ['five', 'four', 'three', 'two', 'one']
        for num in countdown:
            await ctx.send('**:{0}:**'.format(num))
            await asyncio.sleep(1)
        await ctx.send('**:ok:** DING DING DING')

    @commands.command(aliases=['—Ä–∞–Ω–¥'])
    async def random(self, ctx, *arg):
        '''–í—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

        –ü—Ä–∏–º–µ—Ä:
        -----------
        ~random
        ~random coin
        ~random 6
        ~random 10 20
        ~random @–û–Ω
        ~random choice @–Ø @–æ–Ω @–º—ã
        '''
        if ctx.invoked_subcommand is None:
            if not arg:
                start = 1
                end = 100
            elif arg[0] == 'flip' or arg[0] == 'coin':
                coin = ['–û—Ä–µ–ª', '–†–µ—à–∫–∞']
                await ctx.send(f':arrows_counterclockwise: {random.choice(coin)}')
                return
            elif arg[0] == 'choice':
                choices = list(arg)
                choices.pop(0)
                await ctx.send(f':congratulations: –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {random.choice(choices)}')
                return
            elif arg[0] == 'user':
                online = self.userOnline(ctx.guild.members)
                randomuser = random.choice(online)
                if ctx.channel.permissions_for(ctx.author).mention_everyone:
                    user = randomuser.mention
                else:
                    user = randomuser.display_name
                await ctx.send(f':congratulations: –ü–æ–±–µ–¥–∏—Ç–µ–ª—å {user}')
                return
            elif len(arg) == 1:
                start = 1
                end = int(arg[0])
            elif len(arg) == 2:
                start = int(arg[0])
                end = int(arg[1])
            await ctx.send(f'**:arrows_counterclockwise:** –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ: ({start} - {end}): {random.randint(start, end)}')

    @commands.command(aliases=['–∫–∏–ª–ª', '—É–±–∏—Ç—å'])
    async def kill(self, ctx, member:str):
        '''Python'''
        await ctx.send(f'R.I.P. {member}\nhttps://media.giphy.com/media/l41lGAcThnMc29u2Q/giphy.gif')

    @commands.command(aliases=['—Ö–∞–π–ø'])
    async def hype(self, ctx):
        '''HYPE –ü–æ—Ä–æ–≤–æ–∑–∏–∫ CHOO CHOO'''
        hypu = ['https://cdn.discordapp.com/attachments/102817255661772800/219514281136357376/tumblr_nr6ndeEpus1u21ng6o1_540.gif',
                'https://cdn.discordapp.com/attachments/102817255661772800/219518372839161859/tumblr_n1h2afSbCu1ttmhgqo1_500.gif',
                'https://gfycat.com/HairyFloweryBarebirdbat',
                'https://i.imgur.com/PFAQSLA.gif',
                'https://abload.de/img/ezgif-32008219442iq0i.gif',
                'https://i.imgur.com/vOVwq5o.jpg',
                'https://i.imgur.com/Ki12X4j.jpg',
                'https://media.giphy.com/media/b1o4elYH8Tqjm/giphy.gif']
        msg = f':train2: CHOO CHOO {random.choice(hypu)}'
        await ctx.send(msg)

    @commands.command()
    async def xkcd(self, ctx,  *searchterm: str):
        '''–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π xkcd –∫–æ–º–∏–∫—Å

        –ü—Ä–∏–º–µ—Ä:
        -----------
        ~xkcd
        ~xkcd r (random)
        '''
        apiUrl = 'https://xkcd.com{}info.0.json'
        async with aiohttp.ClientSession() as cs:
            async with cs.get(apiUrl.format('/')) as r:
                js = await r.json()
                if ''.join(searchterm) == 'r':
                    randomComic = random.randint(0, js['num'])
                    async with cs.get(apiUrl.format('/' + str(randomComic) + '/')) as r:
                        if r.status == 200:
                            js = await r.json()
                comicUrl = 'https://xkcd.com/{}/'.format(js['num'])
                date = '{}.{}.{}'.format(js['day'], js['month'], js['year'])
                msg = '**{}**\n{}\nAlt Text:```{}```XKCD Link: <{}> ({})'.format(js['safe_title'], js['img'], js['alt'], comicUrl, date)
                await ctx.send(msg)

    @commands.command(hidden=False,aliases=['—Ç—ç–≥'])
    async def tags(self, ctx, command: str, *arg):
        '''–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–≥–∏
        –ü—Ä–∏–º–µ—Ä:
        -----------
        ~tags COMMAND
            –í—ã–≤–æ–¥–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π
        ~tags add COMMAND BILDURL
            –î–æ–±–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
        ~tags del ID
            –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º, —Ç–æ–ª—å–∫–æ –¥–ª—è –ú–æ–¥–∞—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∑–∞–ø–∏—Å–∏
        ~tags list
            –£–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Å—ã–ª–æ–∫
        '''
        with sqlite3.connect(self.db) as con:
            c = con.cursor()
            if command == 'add' or command == 'new':
                if len(arg) > 1:
                    command = arg[0].lower()
                    content = list(arg[1:])
                    c.execute('INSERT INTO "reactions" ("command","url","author") VALUES (?, ?, ?)', (command, ' '.join(content), str(ctx.message.author)))
                    con.commit()
                    await ctx.send(':ok: Tag **{}** hinzugef√ºgt!'.format(arg[0].lower()))
            elif command == 'del' or command == 'rm':
                if await ctx.bot.is_owner(ctx.author):
                    c.execute('DELETE FROM "reactions" WHERE "id" in (?)', (int(arg[0]), ))
                else:
                    c.execute('DELETE FROM "reactions" WHERE "id" in (?) AND "author" IN (?)', (int(arg[0]), str(ctx.message.author)))
                con.commit()
                await ctx.send(':put_litter_in_its_place: Tag-ID #{} gel√∂scht!'.format(arg[0].lower()))
            elif command == 'list':
                lst = c.execute('SELECT * FROM "reactions"')
                msg = ''
                for i in lst:
                    msg += '**ID:** {:>3} | **Command:** {:>15} | **Author:** {}\n'.format(i[0], i[1], i[3])
                await ctx.send(msg)
            else:
                lst = c.execute('SELECT * FROM "reactions" WHERE "command" LIKE (?)', (command,))
                reaction = random.choice(lst.fetchall())
                await ctx.send(reaction[2])
            c.close()

    @commands.command(hidden=True,aliases=['joke'])
    async def pun(self, ctx):
        '''–°–º–µ—à–∏–Ω–∫–∏'''
        puns = ['–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ–¥–Ω–∞ —Å–ø–∏—á–∫–∞ –æ –¥—Ä—É–≥–æ–π —Å–ø–∏—á–∫–µ?\n –î–∞–≤–∞–π, –¥–∞–≤–∞–π –ø—Ä–æ—Ä–≤–µ–º—Å—è',
                '–°–∫–æ–ª—å–∫–æ –Ω–µ–º—Ü–µ–≤ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å –ª–∞–º–ø–æ—á–∫—É?\n –í–æ - –ø–µ—Ä–≤—ã—Ö, –º—ã –±–µ–∑ —é–º–æ—Ä–∞ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ.',
                '–ì–¥–µ –∂–∏–≤–µ—Ç –∫–æ—à–∫–∞?\n –í –ú–µ–∂–µ.',
                'Wie begr√º√üen sich zwei plastische Chirurgen?\n "Was machst du denn heute f√ºr ein Gesicht?"',
                'Warum essen Veganer kein Huhn?\n K√∂nnte Ei enthalten',
                '85% der Frauen finden ihren Arsch zu dick, 10% zu d√ºnn, 5% finden ihn so ok, wie er ist und sind froh, dass sie ihn geheiratet haben...',
                'Meine Freundin meint, ich w√§r neugierig...\n...zumindest\' steht das in ihrem Tagebuch.',
                '"Schatz, Ich muss mein T-Shirt waschen! Welches Waschmaschinen Programm soll ich nehmen?" - "Was steht denn auf dem T-Shirt drauf?"\n "Slayer!"',
                'Gestern erz√§hlte ich meinem Freund, dass ich schon immer dieses Ding aus Harry Potter reiten wollte.\n"einen Besen?" "nein, Hermine."',
                'Warum gehen Ameisen nicht in die Kirche?\nSie sind in Sekten.',
                'Was steht auf dem Grabstein eines Mathematikers?\n"Damit hat er nicht gerechnet."',
                'Wenn ein Yogalehrer seine Beine senkrecht nach oben streckt und dabei furzt, welche Yoga Figur stellt er da?\n Eine Duftkerze',
                'Warum ging der Luftballon kaputt?\n Aus Platzgr√ºnden.',
                'Ich wollte Spiderman anrufen, aber er hatte kein Netz.',
                'Was vermisst eine Schraube am meisten? Einen Vater',
                'Geht ein Panda √ºber die Stra√üe. Bam....Bus!']
        emojis = [':laughing:', ':smile:', ':joy:', ':sob:', ':rofl:']
        msg = f'{random.choice(emojis)} {random.choice(puns)}'
        await ctx.send(msg)

    @commands.command(aliases=['–∫–æ—Ç'])
    async def cat(self,ctx):
        """–†–∞–Ω–¥–æ–º–Ω—ã–π –∫–æ—Ç–∞"""
        async with aiohttp.ClientSession() as session:
            async with session.get('http://aws.random.cat/meow') as r:
            # 200 -> everything fine.
                if r.status == 200:
                    content = await r.json()
                    vid=content['file'].replace('\ ', ' ')
                    embed = discord.Embed(title='–î–µ—Ä–∂–∏ –∫–æ—Ç–µ–π–∫—É')
                    embed.set_image(url=vid)
                    await ctx.send(embed=embed)
            await session.close()
 
    @commands.command(aliases=['—Å–æ–±–∞–∫–∞'])
    async def dog(self,ctx):
            """–†–∞–Ω–¥–æ–º–Ω—ã–π —Å–æ–±–∞–∫—É"""
            # changes to aiohttp -> set the session to a var and call things with it. Kill the session when done...
            async with aiohttp.ClientSession() as session:
                async with session.get("https://random.dog/woof") as r:
                    if r.status == 200:
                        dog_link = await r.text()
                        vid="https://random.dog/" + dog_link
                        embed = discord.Embed(title='–î–µ—Ä–∂–∏ —Å–æ–±–∞—á–∫—É')
                        embed.set_image(url=vid)
                        await ctx.send(embed=embed)
            await session.close()

def setup(bot):
    bot.add_cog(fun(bot))
